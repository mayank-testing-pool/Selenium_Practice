What is Log4j
- fast, flexible and reliable logging framework 
- written in Java
- used for small to large scale Selenium Automation projects.

Why use Log4j?
- an open source
- to store the flow details of our Selenium Automation in a file or databases
- can be used for large as well as small projects
- use log statements rather than SOPL statements in the code to know the status of a project while it is executing

Components of Log4j
1 - Logger
2 - Appenders
3 - Layout

Loggers: 
- responsible for logging information. 

Create an instance for logger class: 
- Logger class is a Java-based utility that has got all the generic methods already implemented to use log4j

Define the Log4j level: 
- Primarily there are five kinds of log levels
- All - This level of logging will log everything ( it turns all the logs on )
- DEBUG – print the debugging information and is helpful in development stage
- INFO – print informational message that highlights the progress of the application
- WARN – print information regarding faulty and unexpected system behavior.
- ERROR – print error message that might allow system to continue
- FATAL – print system critical information which are causing the application to crash
- OFF – No logging

Appenders: 
- used to deliver LogEvents to their destination. 
- decides what will happen with log information. 
- used to write the logs in file. 

Following are few types of Appenders
- ConsoleAppender logs to standard output
- File appender prints logs to some file
- Rolling file appender to a file with maximum size

Note: In log4j properties we can call appender with any name. There are other appenders as well but we will restrict to these few.

Layouts: 
- responsible for formatting logging information in different styles.
- The Logger class provides different methods to handle logging activities. 
- It provides two static methods for obtaining a Logger Object.
	Public static Logger getRootLogger()
	Public static Logger getLogger(String name)

How log4j is configured?

- To configure log4j we have to decide which appender to implement. Accordingly, parameters of appender will be set.

- We will use DEBUG level and RollingFileAppender
- We will do two configurations or logs,
- First: root logger, that will write all system generated logs in file name i.e. Selenium.logs
- Second: Will write the information generated by manual commands in code into the file name- Manual.logs
- Layout will be PatternLayout
